extends layout

block content
    #form
        h3 Calculate the shortest and the fastest paths between amenities in Bjelovar:
        div.row
            div.col-sm-1
                p Source:
            div.col-sm-4
                input#source.form-control(type='text', list='sourceList', placeholder='')
                datalist#sourceList
                   -var data = jsonData.rows
                    -for(var prop in data)
                        option #{data[prop].row_to_json.name}

        div.row
            div.col-sm-1
                p Destination:
            div.col-sm-4
                input#destination.form-control(type='text', list='destinationList', placeholder='')
                datalist#destinationList
                   -var data = jsonData.rows
                    -for(var prop in data)
                        option #{data[prop].row_to_json.name}
   
        div.row
            div.col-sm-2
                p.form-check
                    input#shortestPath.form-check-input(type='radio', name='exampleRadios', value='shortestPath', checked='')
                    label.form-check-label(for='shortestPath')
                        | Shortest path
            div.col-sm-2
                p.form-check
                    input#fastestPath.form-check-input(type='radio', name='exampleRadios', value='fastestPath')
                    label.form-check-label(for='fastestPath')
                        | Fastest path
        div.row
            .col-sm-2
                p.form-check
                    input#checkHighway.form-check-input(type='checkbox', value='avoidHighway')
                    label.form-check-label(for='checkHighway')
                        | Avoid the highway

        div.row
            #submitButton
                p
                    button#submit.btn.btn-danger(type='button') CALCULATE

    #map
    .card
        .card-header   
            h4 Results
        table.table.table-hover.table-fixed
            thead
                tr
                    th(scope='col') #
                    th(scope='col') Source
                    th(scope='col') Destination
                    th(scope='col') Coordinates
            tbody
            
    script.
        var myPoints = !{JSON.stringify(jsonData)};
        console.log(myPoints);
        // Create variable to hold map element, give initial settings to map
        var map = L.map('map', { 
            center: [45.8988, 16.8423], 
            zoom: 16
        }); 

        // Add OpenStreetMap tile layer to map element
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { 
        	attribution: 'Â© OpenStreetMap' 
        }).addTo(map);

        /*var marker_source = L.marker([45.784045, 15.979614], {'draggable': true}).addTo(map);
        marker_source.bindPopup('Source').openPopup();

        var marker_dest = L.marker([43.513016, 16.480865], {'draggable': true}).addTo(map);
        marker_dest.bindPopup('Destination').openPopup();*/

        document.getElementById('submit').addEventListener('click', function() {

            var source_name = $('#source').val();
            var destination_name = $('#destination').val();
            var source_id = null;
            var destination_id = null;

            myPoints.rows.forEach(function (row) {
                if (row.row_to_json.name === source_name) {
                    source_id = row.row_to_json.id;
                }
            });

            myPoints.rows.forEach(function (row) {
                if (row.row_to_json.name === destination_name) {
                    destination_id = row.row_to_json.id;
                }
            });

            /*var source_lat = marker_source.getLatLng().lat;
            var source_lng = marker_source.getLatLng().lng;
            var dest_lat = marker_dest.getLatLng().lat;
            var dest_lng = marker_dest.getLatLng().lng;*/

            if ($('#shortestPath').is(':checked')) { 
                var algorithm = $('#shortestPath').val(); 
            }
            if ($('#fastestPath').is(':checked')) { 
                var algorithm = $('#fastestPath').val();
            }
            if ($('#checkHighway').is(':checked')) { 
                var optional = $('#checkHighway').val();
            } else {
                var optional = null;
            }
            fetch('/getData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
                body: JSON.stringify({
                    data: {
                        idSource: source_id,
                        idDestination: destination_id,
                        /*source_lat: source_lat,
                        source_lng: source_lng,
                        dest_lat: dest_lat,
                        dest_lng: dest_lng,*/
                        path: algorithm,
                        optional: optional
                    }
                })
            }).then((response) => response.json()).then((res) => {

                var pointList = [];
                var unique_array = [];

                res.rows.forEach(function(row) {
                    var pointA = new L.LatLng(row.row_to_json.tg_y, row.row_to_json.tg_x);
                    var pointB = new L.LatLng(row.row_to_json.src_y, row.row_to_json.src_x);
                    pointList.push(pointA);
                    pointList.push(pointB);
                });

                function isEquivalent(a, b) {
                    // Create arrays of property names
                    var aProps = Object.getOwnPropertyNames(a);
                    var bProps = Object.getOwnPropertyNames(b);

                    // If number of properties is different,
                    // objects are not equivalent
                    if (aProps.length != bProps.length) {
                        return false;
                    }

                    for (var i = 0; i < aProps.length; i++) {
                        var propName = aProps[i];

                        // If values of same property are not equal,
                        // objects are not equivalent
                        if (a[propName] !== b[propName]) {
                            return false;
                        }
                    }

                    // If we made it this far, objects
                    // are considered equivalent
                    return true;
                            }
                var checker = false;
                pointList.forEach(function(objElement, index){
                    if (unique_array.length > 0){
                        unique_array.forEach(function(nextObjElement){
                            if(isEquivalent(objElement, nextObjElement)){
                                checker = true;
                            }
                        });
                        if(!checker){
                            unique_array.push(objElement);
                        }else{
                            checker = false;
                        }
                    } else {
                        unique_array.push(objElement);
                    }
                });

                var croatia_roads = new L.Polyline(unique_array, {
                    color: 'red',
                    weight: 3,
                    opacity: 1,
                    smoothFactor: 1,
                });

                var overlayMaps = {
                    "Roads": croatia_roads,
                };

                L.control.layers(null, overlayMaps).addTo(map);
            });
           
        });

        


