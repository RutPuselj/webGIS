extends layout

block content
    #form
        h3 Calculate the shortest and the fastest paths between amenities in Bjelovar:
        div.row
            div.col-sm-1
                p Source:
            div.col-sm-4
                input#source.form-control(type='text', list='sourceList', placeholder='')
                datalist#sourceList
                   -var data = jsonData.rows
                    -for(var prop in data)
                        option #{data[prop].row_to_json.name}

        div.row
            div.col-sm-1
                p Destination:
            div.col-sm-4
                input#destination.form-control(type='text', list='destinationList', placeholder='')
                datalist#destinationList
                   -var data = jsonData.rows
                    -for(var prop in data)
                        option #{data[prop].row_to_json.name}
   
        div.row
            div.col-sm-2
                p.form-check
                    input#shortestPath.form-check-input(type='radio', name='exampleRadios', value='shortestPath', checked='')
                    label.form-check-label(for='shortestPath')
                        | Shortest path
            div.col-sm-2
                p.form-check
                    input#fastestPath.form-check-input(type='radio', name='exampleRadios', value='fastestPath')
                    label.form-check-label(for='fastestPath')
                        | Fastest path

        div.row
            #submitButton
                p
                    button#submit.btn.btn-danger(type='button') CALCULATE

    #map
    .card
        .card-header   
            h4 Results
        table.table.table-hover.table-fixed
            thead
                tr
                    th(scope='col') #
                    th(scope='col') Source
                    th(scope='col') Destination
                    th(scope='col') Distance [km]
                    th(scope='col') Speed [km/h]
                    th(scope='col') Aggregated cost [km or h]
            tbody#resultTable

    script.
        var roadsData = !{JSON.stringify(allRoads)};
        var myPoints = !{JSON.stringify(jsonData)};

        // Create variable to hold map element, give initial settings to map
        var map = L.map('map', { 
            center: [45.8988, 16.8423], 
            zoom: 16
        }); 

        var myIcon = L.icon({
            iconUrl: 'https://openclipart.org/image/800px/svg_to_png/26900/led-circle-black.png',
            iconSize: [27, 27],
        });

        // Add OpenStreetMap tile layer to map element
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { 
        	attribution: 'Â© OpenStreetMap' 
        }).addTo(map);

        var bjelovar_points = L.layerGroup();
        var road = [];
        var all_bjelovar_roads = L.layerGroup();
        
        myPoints.rows.forEach(function(row) {
            bjelovar_points.addLayer(L.marker([row.row_to_json.st_y, row.row_to_json.st_x], {icon: myIcon}).bindPopup(row.row_to_json.name).openPopup());
        });
 
        roadsData.rows.forEach(function(row) {
            var source = new L.LatLng(row.row_to_json.tg_y, row.row_to_json.tg_x);
            var destination = new L.LatLng(row.row_to_json.src_y, row.row_to_json.src_x);

            road.push(source);
            road.push(destination);

            all_bjelovar_roads.addLayer(new L.Polyline(road, {
                color: 'blue',
                weight: 5,
                opacity: 0.5,
                smoothFactor: 1,
            }));
            road = [];
         });

        var overlayMaps = {
            "Bjelovar topology": all_bjelovar_roads,
            "Bjelovar amenities": bjelovar_points
        };

        var layerControl = L.control.layers(null, overlayMaps).addTo(map);

        /*var marker_source = L.marker([45.784045, 15.979614], {'draggable': true}).addTo(map);
        marker_source.bindPopup('Source').openPopup();

        var marker_dest = L.marker([43.513016, 16.480865], {'draggable': true}).addTo(map);
        marker_dest.bindPopup('Destination').openPopup();*/

        document.getElementById('submit').addEventListener('click', function() {

            var source_name = $('#source').val();
            var destination_name = $('#destination').val();
            var source_id = null;
            var destination_id = null;
            var source_x = null;
            var source_y = null;
            var dest_x = null;
            var dest_y = null;

            myPoints.rows.forEach(function (row) {
                if (row.row_to_json.name === source_name) {
                    source_id = row.row_to_json.id;
                    source_x = row.row_to_json.st_x;
                    source_y = row.row_to_json.st_y;
                }
            });

            myPoints.rows.forEach(function (row) {
                if (row.row_to_json.name === destination_name) {
                    destination_id = row.row_to_json.id;
                    dest_x = row.row_to_json.st_x;
                    dest_y = row.row_to_json.st_y;
                }
            });

            /*var source_lat = marker_source.getLatLng().lat;
            var source_lng = marker_source.getLatLng().lng;
            var dest_lat = marker_dest.getLatLng().lat;
            var dest_lng = marker_dest.getLatLng().lng;*/

            if ($('#shortestPath').is(':checked')) { 
                var algorithm = $('#shortestPath').val(); 
            }
            if ($('#fastestPath').is(':checked')) { 
                var algorithm = $('#fastestPath').val();
            } else {
                var optional = null;
            }

            fetch('/getData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
                body: JSON.stringify({
                    data: {
                        idSource: source_id,
                        idDestination: destination_id,
                        path: algorithm,
                        optional: optional
                    }
                })
            }).then((response) => response.json()).then((res) => {

                var pointList = [];
                var bjelovar_roads = L.layerGroup();
                var counter = 0;
                var nekiElement = document.getElementById('resultTable');
                nekiElement.innerHTML = '';
                var cost = 0;
                var last_road_x = null;
                var last_road_y = null;
                var flag = false;

                res.rows.forEach(function(row) {
                    var pointA = new L.LatLng(row.row_to_json.tg_y, row.row_to_json.tg_x);
                    var pointB = new L.LatLng(row.row_to_json.src_y, row.row_to_json.src_x);
                    pointList.push(pointA);
                    pointList.push(pointB);

                    bjelovar_roads.addLayer(new L.Polyline(pointList, {
                        color: 'red',
                        weight: 5,
                        opacity: 1,
                        smoothFactor: 1,
                    }));
                    
                    cost += row.row_to_json.cost;
                    pointList = [];
                    counter += 1;
                    var tableRow = document.createElement('tr');

                    if (!flag) {
                        if (row.row_to_json.src_x === source_x && row.row_to_json.src_y === source_y) {
                            flag = true;
                            tableRow.innerHTML = '<th>' + counter + '</th><th>[' + row.row_to_json.src_x + ', ' + row.row_to_json.src_y + ']</th><th>[' + row.row_to_json.tg_x + ', ' + row.row_to_json.tg_y + ']</th><th>' + row.row_to_json.km + '</th><th>' + row.row_to_json.kmh + '</th><th>' + cost + '</th>';
                            last_road_x = row.row_to_json.tg_x;
                        	last_road_y = row.row_to_json.tg_y;
                        } else {
                            tableRow.innerHTML = '<th>' + counter + '</th><th>[' + row.row_to_json.tg_x + ', ' + row.row_to_json.tg_y + ']</th><th>[' + row.row_to_json.src_x + ', ' + row.row_to_json.src_y + ']</th><th>' + row.row_to_json.km + '</th><th>' + row.row_to_json.kmh + '</th><th>' + cost + '</th>';
                            flag = true;
                            last_road_x = row.row_to_json.src_x;
                            last_road_y = row.row_to_json.src_y;
                        }
                    } else {
                        if (row.row_to_json.src_x === last_road_x && row.row_to_json.src_y === last_road_y){
                            tableRow.innerHTML = '<th>' + counter + '</th><th>[' + row.row_to_json.src_x + ', ' + row.row_to_json.src_y + ']</th><th>[' + row.row_to_json.tg_x + ', ' + row.row_to_json.tg_y + ']</th><th>' + row.row_to_json.km + '</th><th>' + row.row_to_json.kmh + '</th><th>' + cost + '</th>';
                            last_road_x = row.row_to_json.tg_x;
                            last_road_y = row.row_to_json.tg_y;
                        }else{
                            tableRow.innerHTML = '<th>' + counter + '</th><th>[' + row.row_to_json.tg_x + ', ' + row.row_to_json.tg_y + ']</th><th>[' + row.row_to_json.src_x + ', ' + row.row_to_json.src_y + ']</th><th>' + row.row_to_json.km + '</th><th>' + row.row_to_json.kmh + '</th><th>' + cost + '</th>';
                            last_road_x = row.row_to_json.src_x;
                            last_road_y = row.row_to_json.src_y;
                        }
                    }
                    nekiElement.appendChild(tableRow);
                });
                layerControl.addOverlay(bjelovar_roads, source_name + ' - ' + destination_name);
            });
           
        });



        


