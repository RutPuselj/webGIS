extends layout

block content
    #form
        h3 Calculate the shortest and the fastest paths between cities in Croatia:
        div.row
            div.col-sm-1
                p Source:
            div.col-sm-4
                input#source.form-control(type='text', list='cityNames', placeholder='e.g. Zagreb')
                datalist#cityNames
                   -var data = jsonDataCityNames.features
                    -for(var prop in data)
                        option #{data[prop].properties.f2}

        div.row
            div.col-sm-1
                p Destination:
            div.col-sm-4
                input#destination.form-control(type='text', list='cityNames', placeholder='e.g. Split')
                datalist#cityNames
                   -var data = jsonDataCityNames.features
                    -for(var prop in data)
                        option #{data[prop].properties.f2}
   
        div.row
            div.col-sm-2
                p.form-check
                    input#shortestPath.form-check-input(type='radio', name='exampleRadios', value='shortestPath', checked='')
                    label.form-check-label(for='shortestPath')
                        | Shortest path
            div.col-sm-2
                p.form-check
                    input#fastestPath.form-check-input(type='radio', name='exampleRadios', value='fastestPath')
                    label.form-check-label(for='fastestPath')
                        | Fastest path
        div.row
            .col-sm-2
                p.form-check
                    input#checkHighway.form-check-input(type='checkbox', value='avoidHighway')
                    label.form-check-label(for='checkHighway')
                        | Avoid the highway

        div.row
            #submitButton
                p
                    button#submit.btn.btn-danger(type='button') CALCULATE

    #map
    .card
        .card-header   
            h4 Results
        table.table.table-hover.table-fixed
            thead
                tr
                    th(scope='col') #
                    th(scope='col') Source
                    th(scope='col') Destination
                    th(scope='col') Coordinates
            tbody
                -var data = jsonData.features
                -for(var prop in data)
                    tr
                        th(scope='row')= prop
                        td #{data[prop].properties.f2}

    script.
        var myData = !{JSON.stringify(jsonData)};

        // Create variable to hold map element, give initial settings to map
        var map = L.map('map', { 
            center: [44.4738, 16.4689], 
            zoom: 7
        }); 
        // Add OpenStreetMap tile layer to map element
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { 
        	attribution: 'Â© OpenStreetMap' 
        }).addTo(map);
        // Add JSON to map
        /*var cafes = L.geoJson(myData,{
            onEachFeature: function (feature, layer) {
                layer.bindPopup(feature.properties.f2);
            }
        });*/

        var pointList = [];

        myData.rows.forEach(function(row) {
            var point = new L.LatLng(row.row_to_json.st_y, row.row_to_json.st_x);
            pointList.push(point);
        });


        //var pointA = new L.LatLng(28.635308, 77.22496);
        //var pointB = new L.LatLng(48.984461, 97.70641);

        var firstpolyline = new L.Polyline(pointList, {
            color: 'red',
            weight: 3,
            opacity: 1,
            smoothFactor: 1
        });

        document.getElementById('submit').addEventListener('click', function() {
            var source = $('#source').val();
            var dest = $('#destination').val();
            if ($('#shortestPath').is(':checked')) { 
                var algorithm = $('#shortestPath').val(); 
            }
            if ($('#fastestPath').is(':checked')) { 
                var algorithm = $('#fastestPath').val();
            }
            if ($('#checkHighway').is(':checked')) { 
                var optional = $('#checkHighway').val();
            } else {
                var optional = null;
            }
            fetch('/getData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
                body: JSON.stringify({
                    data: {
                        source: source,
                        destination: dest,
                        path: algorithm,
                        optional: optional
                    }
                })
            }).then((response) => console.log(response));
           
        });

        var overlayMaps = {
            "Lines": firstpolyline
        };

        L.control.layers(null, overlayMaps).addTo(map);


